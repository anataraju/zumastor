
Content
  * config_uml is the configuration file for setting up uml.
  * config_single is the configuration file for setting up a single zumastor host.
  * config_replication is the configuration file for setting up replication.
  * build_uml.sh builds uml linux executable with the $KERNEL_VERSION specified 
    in config_uml.
  * build_fs.sh builds a root file system image based on the image downloaded from 
    uml website.
  * build_fs_root.sh requires root privilege. It installs all the required libraries
    and utilities on the root file system image.
  * setup_network_root.sh requires root privilege. It configures host and uml network.
  * set_single.sh loads up a uml and sets up a zumastor volume according to the
    configurations specified in config_single.
  * setup_replication.sh loads up source and target umls, sets up ssh keys for source 
    and target umls to access each other, and sets up source and target volumes 
    according to the configurations specified in config_replication.
  * replication_cleanup.sh removes zumastor volumes and shuts down the umls.
  * update_zuma_root.sh requires root privilege. It takes the root file system 
    image as input and installs ddnsap and zumastor from the $ZUMA_REPOSITORY repository
    specified in config_uml. The ddsnap and zumastor code need to be compiled first
    before running this script. ddsnap and zumastor directories need to be readable
    by root.
  * test_XXX.sh is a test script that tests zumastor correctness under a particular 
    condition.
  * run_all.sh runs all test scripts included in the current directory one by one. 
    The generated results are "test_name PASS/FAIL/UNRESOLVED" and a log file of 
    output for each test.

Usage
  * The host machine needs to run a 32 bit kernel and a libc compatible with Debian 
    Etch (such as Ubuntu Dapper) to compile uml linux kernel.
  * The default configuration files assume the tests to be run from the test/uml
    directory under a zumastor source repository. If you want to run the uml tests
    from a different place, please copy all the files in this directory to your
    working directory and change $ZUMA_REPOSITORY in config_uml to the path where 
    zumastor repository locates.
  * If running as root, you can simply start a test script test_XXX.sh that automatically 
    builds everything for you at the first time. After that, it re-uses the existing 
    kernel and file system images in the subsequent tests.
  * For security reason, we recommend you to run uml tests as a normal user.
    Here are the steps to set up a uml environment for zumastor replication test
    as a normal user. Below, steps 2, 3, and 5 require root previlige. After the
    initial setup, any test will re-use the existing kernel and file system images.
        step 1: ./build_fs.sh uml_fs1
        step 2: sudo ./build_fs_root.sh uml_fs1
        step 3: sudo ./setup_network_root.sh 192.168.100.1 192.168.100.111 uml_1 uml_fs1
                (If it is single uml test, go directly to step 6)
        step 4: cp uml_fs1 uml_fs2; chmod a+rw uml_fs2
        step 5: sudo ./setup_network_root.sh 192.168.100.2 192.168.100.111 uml_2 uml_fs2
        step 6: ./test_xxx.sh
    Above, uml_fs1 is the file name of the source uml file system image, uml_fs2 is 
    the file name of the target uml file system image, 192.168.100.1 is the virtual 
    IP assigned to source uml, 192.168.100.2 is the virtual IP assigned to target uml, 
    uml_1 is the host name assigned to source uml, uml_2 is the host name assigned 
    to target uml, and 192.168.100.111 is the assigned tap IP on host. You can replace 
    these values with your own configuration. When you change a configuration, have a 
    look at config_uml and config_replication (or config_single for single uml test) 
    and modify them accordingly.
  * If you have a file system image built from a previous test, you can first 
    copy it to the directory where you want to run the test and name it as 
    $source_uml_fs as specified in config_replicaiton (or $uml_fs in config_single
    for single uml test). You can then skip step 1 during uml setup.
  * If you want to run large volume replication tests, you can create four logical 
    volumes on the host with 'lvcreate', and replace $source_ubdb_dev, $source_ubdc_dev,
    $target_ubdb_dev, and $target_ubdc_dev with these lvms in config_replication.
  * The built root file system image contains basic packages required to run a 
    zumastor test. For developers, you can run update_zuma_root.sh to install your own 
    ddsnap and zumastor code from a local zumastor source repository. Before doing
    this, have a look at config_uml and change $ZUMA_REPOSITORY to the path of your
    local zumastor source repository. You can also install the following packages 
    and checkout the current zumastor code on uml if you want to debug zumastor
    and ddsnap on uml directly:
         apt-get install subversion
         apt-get install make
         apt-get install gcc
         apt-get install zlib1g-dev
         apt-get install libpopt-dev
         svn co http://zumastor.googlecode.com/svn/trunk/ zumastor

Troubleshooting
  uml kernel build)
    * Watch out for oldconfig ARCH=um gratuitously changing your config to 64bit 
      if you are building under a 64 bit host.
    * Please check the gcc version if you got any error during compiling.
      (gcc-4.0 may cause some problems).
  host iptable setup)
    * The kernel config options Networking -> Network Options -> 
      Network packet filtering framework -> Core Netfilter Configuration -> 
      Netfilter connection tracking support and Networking -> Network Options -> 
      Network packet filtering framework -> IP: Netfilter Configuration -> 
      IPv4 connection tracking support && Full NAT && MASQUERADE target support 
      need to be set on host machine for iptable to work.
  access from another host)
    * Add route on a host that wants to access the uml: 
        route add -host $uml_ip gw $hostname dev eth0
    * Add hostname matching on a host that wants to access the uml: 
        echo "$uml_ip $uml_host" >> /etc/hosts
  running)
    * The default memory that the test scripts assign to uml is 64M. You can change 
      this by changing the value of mem option that linux takes in the corresponding 
      test script.
    * If syslogd or ssh are extremely slow, check if your DNS server responds to 
      queries from the assigned uml names. Append your domain name to those uml
      names to see if that solves the problem.
    * If you want to check the status of a running uml, you can ssh to it with
      'ssh -l root uml_1' where uml_1 is the assigned uml hostname. In case ssh does
      not work, you can attach to the running uml with 'screen -r pid-of-uml-screen'
      where pid-of-uml-screen is the pid of process "SCREEN -d -m ./linux ...".
